import requests
# https://realpython.com/python-api/getting-to-know-apis

# simple api request
# import requests
# requests.get("https://randomuser.me/api/")

# api simple with data
# >>> import requests
# >>> response = requests.get("https://randomuser.me/api/")
# >>> response.text
# '{"results":[{"gender":"female",
# "name":{"title":"Ms","first":"Isobel","last":"Wang"}...'

# returns basic data about api not real data cause its base url
response = requests.get("https://api.thecatapi.com/")
response.status_code
response.reason
response.text
request = response.request # Prepared requests GET 
request.url
request.path_url
request.method
request.headers

    # endpoint is part of the url that specifies what resources you want to fetch
    # apis will have api refreance in docmentation

# api data using endpoint
# returns all data of all the breeds of cats
response = requests.get("https://api.thecatapi.com/v1/breeds")
response.status_code
response.text
request = response.request # Prepared requests GET 
request.url
request.path_url
request.method
request.headers
response.headers.get("Content-Type") #Defines content type 

# dog api with same base url but different base url
# returns all data of all the breeds of dogs
response = requests.get("https://api.thedogapi.com/v1/breeds")
response.status_code
response.text
request = response.request # Prepared requests GET 
request.url
request.path_url
request.method
request.headers


    # https is the encrypted version of http
    # when using public apis stay away from sending private info over http
    # Requests contain relevant data regarding your API request call, such as the base URL, the endpoint, the method used, the headers, and so on.
    # Responses contain relevant data returned by the server, including the data or content, the status code, and the headers.

# Dict to define headers and send them along with your request
# headers = {"X-Request-id": "<my-request-id>"}
# response = requests.get("https://example.org", headers = headers)
# response.request.headers

#This uses a different content type
url = "https://image-charts.com/chart?chs=700x125&cht=ls&chd=t:23,15,28"
response = requests.get(url)
response.headers.get("Content-Type") # returns image/png

# CONTENT TYPE IS VERY IMPORTANT WITH UNDERSTANDING HOW TO HANDLE A RESPONES
# there are a few response atributes that can be used to manipulate the the response data
# .text returns response in unicode format  .content returns response contents in bytes

# Get a specific instance from the api
url = "https://api.thecatapi.com/v1/breeds/abys"
response = requests.get(url)
response.headers.get("Content-Type")
response.content # Returns in content format <--- format
response.json() # Returns in Json format <--- format
response.json()["name"] #Return in Json format and specific value for key specified <---Format

# fetching img and 
url = "https://image-charts.com/chart?chs=700x125&cht=ls&chd=t:23,15,28"
response = requests.get(url)
response.headers.get("Content-Type") # image/png 
response.content # image/png doesnt work well as content

# with open("chart.png", mode="wb") as file:  storing the image from the api call  <---- USING IMAGES FROM API 
#     file.write(response.content)  Storing the content type to a file which creates an image <---TURNING CONTENT INTO FILE WHERE THE INFO IS DISPLAYED AS IMAGE


# Methods 
# requests.post()  POST - create a new resource / create data
# requests.get()  GET - Read an exsisting resource / fetch data
# requests.put()  PUT - Update an exsisting resource / update data
# requests.delete()  Delete - Deleting an exsisting resource / remove data

# CRUD
response = requests.post("https://api.thecatapi.com/v1/breeds/abys")
request = response.request
request.method
response.status_code

response = requests.get("https://api.thecatapi.com/v1/breeds/abys")
request = response.request
request.method
response.status_code

response = requests.put("https://api.thecatapi.com/v1/breeds/abys")
request = response.request
request.method
response.status_code

response = requests.delete("https://api.thecatapi.com/v1/breeds/abys")
request = response.request
request.method
response.status_code


# QUERY PARAMETERS
# add query param by adding ? to before the first param 
# If multiple param split them with &

# generate a random user with param generated by prestored data
# single param
# gender = "female"
# requests.get(f"https://randomuser.me/api/?gender={gender}").json() 
# cat = "abys"
# response = requests.get(f"https://api.thecatapi.com/v1/breeds/{cat}").json()
# two param
# nation = "de"
# requests.get(f"https://randomuser.me/api/?gender={gender}&nat={nation}").json()

# query_param = {"gender": "female", "nat": "de"}
# print(requests.get(f"https://randomuser.me/api/", params = query_param).json())

# endpoint = "https://api.thecatapi.com/v1/breeds/search"
# query_param = {"q": "ragamuffin"}
# response = requests.get(endpoint, params=query_param).json()


# AUTHENTICATION
# endpoint = "https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos"
# api_key = "DEMO_KEY"
# query_params = {"api_key": api_key, "earth_date": "2020-07-01"}
# response = requests.get(endpoint, params=query_params)
# print(response.status_code)
# response.json()
# photos = response.json()["photos"]
# print(f"Found {len(photos)} photos")
# print(photos[4]['img_src'])
# Using .json() to convert the response to a Python dictionary and then fetching
# the photos field from the response, you’re able to iterate through all the Photo
# objects and even fetch a specific photo’s image URL.
































